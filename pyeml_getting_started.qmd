---
title: "Getting started with pyEML"
subtitle: "An Ecological Metadata Language pipeline for python"
date: 20 Apr 2023
format:
  html:
    code-fold: true
jupyter: python3
---
# Introduction
pyEML is a semi-automatic python package for creating and editing [Ecological Metadata Language](https://eml.ecoinformatics.org/) (EML) xml metadata. The development version of pyEML is available in [this repository](https://github.com/cwainright/pyEML).

R is the lingua franca of ecological data science, so it's no surprise that R offers a robust tool stack for generating EML. R users can create EML node trees with [ropensci/EML](https://github.com/ropensci/EML), execute EML-generating routines with [EDIorg/EMLassemblyline](https://github.com/EDIorg/EMLassemblyline), and edit node-level data with [nationalparkservice/EMLeditor](https://github.com/nationalparkservice/EMLeditor). There is no similarly extensible python tool-stack for EML.

[Metapype](https://github.com/PASTAplus/metapype-eml), an excellent EML tool for python, is a framework for building EML node trees, like [ropensci/EML](https://github.com/ropensci/EML). Metapype is a strong foundation for other tools because metapype's [`Node`](https://github.com/PASTAplus/metapype-eml/blob/master/src/metapype/model/node.py) class is already integrated with the [rules](https://github.com/PASTAplus/metapype-eml/blob/master/src/metapype/eml/rules.json) defined in the [EML schema documentation](https://eml.ecoinformatics.org/schema/). This integration simplifies the creation of EML-compliant xml in python. Metapype does not, however, offer the additional features of the R tool-stack like building node trees from summary metadata, which is a powerful workflow in [EDIorg/EMLassemblyline](https://github.com/EDIorg/EMLassemblyline), or granular `get` and `set` methods to edit EML nodes (e.g, title, author), like [nationalparkservice/EMLeditor](https://github.com/nationalparkservice/EMLeditor). Metapype's strengths make it a useful foundation upon which other tools can be stacked.

# Justification for pyEML
[pyEML](https://github.com/cwainright/pyEML) can be to [metapype](https://github.com/PASTAplus/metapype-eml) what [EDIorg/EMLassemblyline](https://github.com/EDIorg/EMLassemblyline) and [nationalparkservice/EMLeditor](https://github.com/nationalparkservice/EMLeditor) are to [ropensci/EML](https://github.com/ropensci/EML). pyEML can be built on [metapype](https://github.com/PASTAplus/metapype-eml) with features to generate node trees from source files and a feedback-rich interface to edit nodes. pyEML's `Eml` class will programmatically build node trees from source files (like csvs of pre-digested metadata) or use metapype's IO methods to build node trees from xml or json files. Then, a user can create, read, update, and delete nodes with `Eml`'s interactive interface that calls `metapype` methods. In the future, the `Eml` class should also be able to build EML from an [EDD](https://www.epa.gov/sites/default/files/2016-01/documents/r2comprehensivemanual_sept2015.pdf)-formatted database. A fully-featured python EML tool-stack will also stack with other technologies that already support python but not R, like Esri tools.

# Dependencies
Dependencies for pyEML are detailed in [requirements.txt](https://github.com/cwainright/pyEML/blob/main/requirements.txt).

Use `pip install -r requirements.txt` to install pyEML's dependencies in your python project environment.

# Workflow outline
When complete, pyEML will have two classes for building and editing EML: `Eml` and `Emld`.
* `Eml` builds an element tree from source files
* `Emld` builds an element tree from xml

As of 20 Apr 2023, the `Emld` class is available for demonstration and the `Eml` class is not. Eventually, `Eml` will be `Emld`'s parent class. The two classes will share the same feature-methods (e.g., `get` and `set`) but will have different `__init__()` methods so users can build pyEML objects from source csvs (`Eml`) or xml files (`Emld`).

1. Create EML xml. Here are two options:
  a. [EDIorg/EMLassemblyline](https://github.com/EDIorg/EMLassemblyline)
  b. [ezEML](https://ezeml.edirepository.org/eml/)
2. Create an `Emld` instance.
3. Determine what changes you want to make to your EML. Two options:
  a. Look over your EML as a whole
    - Open your xml in a text editor
    - use pyEML's serializer to print xml to python console. e.g.,
      `myemld._serialize(myemld.root)`
  b. Look at individual EML nodes
    - use pyEML's `get` methods. e.g.,
      `myemld.get_title()`
      `myemld.get_author()`
4. Use `get`, `set`, `delete` methods to edit EML.
  * Documentation on all pyEML methods is available https://github.com/cwainright/pyEML.
5. Write the updated EML back to xml

# A minimal workflow

## Clone the github repo
Since pyEML is in development, to use the package, you will need to clone the github repo. Instructions for cloning a repo are [here](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository).

## Start an interactive workflow
pyEML includes an example [interactive workflow](https://github.com/cwainright/pyEML/tree/main/test) called `test/interactive.py`. Alternatively, create your own `.py` file and import pyEML modules as shown in `test/interactive.py`.

1. Create EML xml.
pyEML includes [data/short_input.xml](https://github.com/cwainright/pyEML/tree/main/data) for demonstration purposes.

Creating your own EML is outside the scope of a pyEML getting-started document but there are a handful of good non-python tools to generate EML. Use one of those tools to generate your own EML. Here are two options:
  a. [EDIorg/EMLassemblyline](https://github.com/EDIorg/EMLassemblyline) (an R package)
  b. [ezEML](https://ezeml.edirepository.org/eml/) (a web-based GUI tool)

2. Create an `Emld` instance.
```{python}
from src.pyEML.emld import Emld

filename = 'data/short_input.xml'
myemld = Emld(filepath=filename, INTERACTIVE=True)
```

Note: if `src.pyEML.emld` fails to import, you may need to move `interactive.py` to your project's root directory for `interactive.py` to find the `src.pyEML.emld` module. This seems to be a quirk of the project being an unconfigured PyPI package and the quirk will resolve itself once the package is configured for pip installation.

3. Determine what changes you want to make to your EML.

If your EML file is small, it may make sense to review your whole EML document in a text editor. Alternatively, you can use pyEML's built-in serializer to print your EML file to your console.
```{python}
myemld._serialize(myemld.root)
```

```{python}
# Some functions from EMLeditor that will be critical to run include:
# set_cui, set_doi, set_drr and set_content_units, set_producing_units (with more to come soon).
```